/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package jetty

import org.eclipse.jetty.http2.server.HTTP2CServerConnectionFactory
import org.eclipse.jetty.server.ConnectionFactory
import org.eclipse.jetty.server.HttpConfiguration
import org.eclipse.jetty.server.HttpConnectionFactory
import org.eclipse.jetty.server.Server
import org.eclipse.jetty.server.ServerConnector
import org.eclipse.jetty.servlet.ServletHandler
import org.eclipse.jetty.unixsocket.server.UnixSocketConnector

class App {
    private val server: Server = initServer()

    private fun initServer(): Server {
        val s = Server()
        val connector = ServerConnector(s)
        connector.port = 8090
        s.addConnector(connector)

        val handler = ServletHandler()
        handler.addServletWithMapping(BlockingServlet::class.java, "/status")
        s.handler = handler

        configureUds(s)

        return s
    }

    private fun configureUds(s: Server) {
        val httpConfig = HttpConfiguration()
        val udsConnFactories = mutableListOf<ConnectionFactory>()
        udsConnFactories.add(HttpConnectionFactory(httpConfig))
        udsConnFactories.add(HTTP2CServerConnectionFactory(httpConfig))

        val udsConnector = UnixSocketConnector(
            s,
            null /* executor */,
            null /* scheduler */,
            null /* buffer pool */,
            -1,
            *udsConnFactories.toTypedArray()
        )
        udsConnector.setUnixSocket("/tmp/jetty_test.sock")
        udsConnector.name = "uds"
        s.addConnector(udsConnector)
    }

    fun start() {
        server.start()
        server.join()
    }

}

fun main() {
    println("Running Jetty")
    App().start()
}
